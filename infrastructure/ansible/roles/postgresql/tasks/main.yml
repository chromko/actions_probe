# file: postgresql/tasks/main.yml

- include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_os_family }}.yml"
    - "../vars/empty.yml"
  tags: [always]

- import_tasks: install_apt.yml
  when: ansible_pkg_mgr == "apt"
  tags: [postgresql, postgresql-install]

- import_tasks: install_yum.yml
  when: ansible_pkg_mgr == "yum" and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" )
  tags: [postgresql, postgresql-install]

- import_tasks: install_dnf.yml
  when: ansible_pkg_mgr == "dnf" and ansible_distribution == "Fedora"
  tags: [postgresql, postgresql-install]

- import_tasks: extensions.yml
  tags: [postgresql, postgresql-extensions]

- import_tasks: configure.yml
  tags: [postgresql, postgresql-configure]

- name: PostgreSQL | Ensure PostgreSQL is running
  service:
    name: "{{ postgresql_service_name }}"
    state: started
    enabled: yes

- name: Check that postgresql is not in recovery mode yet
  shell: psql -Atqc "select pg_is_in_recovery();"
  become: yes
  become_user: "{{ postgresql_admin_user }}"
  register: recovery_status
  ignore_errors: yes
  changed_when: false

- import_tasks: restore.yml
  when: postgresql_restore == true
  tags: [postgresql, restore]

- import_tasks: users.yml
  tags: [postgresql, postgresql-users]
  when: recovery_status.stdout is defined and recovery_status.stdout == "f" | default(true)

- import_tasks: databases.yml
  tags: [postgresql, postgresql-databases]
  when: recovery_status.stdout is defined and recovery_status.stdout == "f" | default(true)

- import_tasks: schemas.yml
  tags: [postgresql, postgresql-schemas]
  when: recovery_status.stdout is defined and recovery_status.stdout == "f" | default(true)

- import_tasks: users_privileges.yml
  tags: [postgresql, postgresql-users]
  when: recovery_status.stdout is defined and recovery_status.stdout == "f" | default(true)

- import_tasks: monit.yml
  when: monit_protection is defined and monit_protection == true
  tags: [postgresql, postgresql-monit]
